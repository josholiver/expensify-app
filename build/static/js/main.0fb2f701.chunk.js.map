{"version":3,"sources":["playground/counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAddOne","bind","assertThisInitialized","handleMinusOne","handlereset","state","count","stringCount","localStorage","getItem","parseInt","isNaN","setState","prevProp","prevState","setItem","react_default","a","createElement","onClick","Component","src_App","App","handleDeleteOptions","handlePick","handleAddOption","handleDeleteOption","options","json","JSON","parse","e","prevProps","length","stringify","console","log","optionToRemove","filter","option","randomNum","Math","floor","random","alert","indexOf","concat","className","App_Header","subtitle","App_Action","hasOptions","App_Options","App_AddOptions","counter","React","Header","title","defaultProps","Action","disabled","Options","map","App_Option","key","optionText","Option","AddOptions","_this2","error","undefined","preventDefault","target","elements","value","trim","onSubmit","type","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fb2f701.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Counter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAddOne = this.handleAddOne.bind(this);\n        this.handleMinusOne = this.handleMinusOne.bind(this);\n        this.handlereset = this.handlereset.bind(this);\n\n        this.state = {\n            count: 0\n        };\n    }\n\n    componentDidMount() {\n        const stringCount = localStorage.getItem('count');\n        const count = parseInt(stringCount, 10);\n\n        if (!isNaN(count)) {\n            this.setState(() => ({ count }));\n        }\n\n    }\n\n    componentDidUpdate(prevProp, prevState) {\n        if (prevState.count !== this.state.count) {\n            localStorage.setItem('count', this.state.count);\n        }\n\n    }\n\n    handleAddOne() {\n        this.setState((prevState) => {\n            return {\n                count: prevState.count + 1\n            };\n        });\n    }\n\n    handleMinusOne() {\n        this.setState((prevState) => {\n            return {\n                count: prevState.count - 1\n            };\n        });\n    }\n    handlereset() {\n        this.setState(() => {\n            return {\n                count: 0\n            };\n\n        });\n    }\n    render() {\n        return (\n            <div>\n                <h1>Count: {this.state.count}</h1>\n                <button onClick={this.handleAddOne}>+</button>\n                <button onClick={this.handleMinusOne}>-</button>\n                <button onClick={this.handlereset}>reset</button>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './playground/counter.js'\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleDeleteOptions = this.handleDeleteOptions.bind(this);\n        this.handlePick = this.handlePick.bind(this);\n        this.handleAddOption = this.handleAddOption.bind(this);\n        this.handleDeleteOption = this.handleDeleteOption.bind(this);\n        this.state = {\n            options: []\n        };\n    }\n\n    componentDidMount() {\n        try {\n            const json = localStorage.getItem('options');\n            const options = JSON.parse(json);\n\n            if (options) {\n                this.setState(() => ({ options }));\n            }\n\n        } catch (e) {\n            //Do nothing at all\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.options.length !== this.state.options.length) {\n            const json = JSON.stringify(this.state.options);\n            localStorage.setItem('options', json);\n        }\n\n    }\n\n    componentWillUnmount() {\n        console.log('Component will unmount')\n    }\n\n    handleDeleteOptions() {\n        // this.setState(() => {\n        //     return {\n        //         options: []\n        //     };\n        // });\n        this.setState(() => ({ options: [] }));\n    }\n    handleDeleteOption(optionToRemove) {\n        this.setState((prevState) => ({\n            options: prevState.options.filter((option) => optionToRemove !== option)\n        }));\n    }\n\n\n    handlePick() {\n        const randomNum = Math.floor(Math.random() * this.state.options.length);\n        const option = this.state.options[randomNum];\n        alert(option);\n\n\n    }\n\n    handleAddOption(option) {\n        if (!option) {\n            return 'Enter valid value to add item';\n        } else if (this.state.options.indexOf(option) > -1) {\n            return 'This option already exists';\n        }\n\n\n\n        // this.setState((prevState) => {\n        //     return {\n        //         options: prevState.options.concat(option)\n        //     };\n        // });\n\n        this.setState((prevState) => ({ options: prevState.options.concat(option) }));\n    }\n\n\n\n\n    render() {\n        const subtitle = 'Put your life in the hands of a computer';\n\n        return (\n            <div className=\"App\">\n                <Header subtitle={subtitle}/>\n                <Action \n                  hasOptions={this.state.options.length > 0}\n                  handlePick = {this.handlePick}\n                  />\n                <Options \n                  options={this.state.options}\n                  handleDeleteOptions = {this.handleDeleteOptions}\n                  handleDeleteOption = {this.handleDeleteOption}\n                />\n                <AddOptions\n                    handleAddOption = {this.handleAddOption}\n                />\n                <Counter count = {-10}/>              \n                \n            </div>\n        );\n    }\n}\nexport default App;\n\n\nconst Header = (props) => {\n    return (\n        <div>\n          <h1>{props.title}</h1>\n            {props.subtitle && <h3>{props.subtitle}</h3>}         \n        </div>\n    );\n};\n\nHeader.defaultProps = {\n    title: 'Indecision'\n};\n\nconst Action = (props) => {\n\n    return (\n        <div>\n            <button\n             onClick={props.handlePick}\n             disabled={!props.hasOptions}\n             >\n                What should I do?\n            </button>\n        </div>\n    );\n};\n\nconst Options = (props) => {\n    return (\n        <div>\n         <button onClick ={props.handleDeleteOptions}>Remove All</button>\n            {props.options.length ===0 && <p>Please add an option to get started!</p>}\n            {\n                props.options.map((option) =>(\n                     <Option\n                      key = { option }\n                      optionText = { option }\n                      handleDeleteOption = {props.handleDeleteOption}\n                    />\n                    ))\n            }\n        </div>\n    );\n};\n\nconst Option = (props) => {\n    return (\n        <div>\n         {props.optionText}\n         <button \n            onClick={(e)=>{\n                props.handleDeleteOption(props.optionText)\n            }}\n\n         >\n             remove\n         </button>\n        </div>\n    );\n};\n\nclass AddOptions extends Component {\n    constructor(props) {\n        super(props);\n        this.handleAddOption = this.handleAddOption.bind(this);\n        this.state = {\n            error: undefined\n        };\n    }\n\n    handleAddOption(e) {\n        e.preventDefault();\n\n        const option = e.target.elements.option.value.trim();\n        const error = this.props.handleAddOption(option);\n\n        // this.setState(() => {\n        //     return {\n        //         error: error\n        //     };\n        // });\n\n\n        this.setState(() => ({ error: error }));\n\n        if (!error) {\n            e.target.elements.option.value = '';\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.error && <p>{this.state.error}</p>}\n                <form onSubmit={this.handleAddOption}> \n                <input type=\"text\" name = \"option\"/>\n                <button>Add Option</button>\n                </form>\n            </div>\n        );\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}